{
column<-enc2native(tables[,i])
for(j in 1:nrow(tables))
{
if(nchar(column[j])>dopusk)
{
partName=c(partName,column[j])
partRowID<-c(partRowID,j)
}
else if (nchar(column[j])<dopusk && nchar(column[j])>1)
{
dataID<-c(dataID,j)
}
}
alldata<-c(alldata, column[dataID])
x<-as.data.frame(unlist(alldata))
dataID<-c()
}
bad<-is.na(x)
x[!bad]
for (i in c(3,5))
{
column<-enc2native(tables[,i])
for(j in 1:nrow(tables))
{
if(nchar(column[j])>dopusk)
{
partName=c(partName,column[j])
partRowID<-c(partRowID,j)
}
else if (nchar(column[j])<dopusk && nchar(column[j])>1)
{
dataID<-c(dataID,j)
}
}
alldata2<-c(alldata2, column[dataID])
y<-as.data.frame(unlist(alldata))
dataID<-c()
}
bad<-is.na(y)
y[!bad]
column
library(XML)
theurl <- "druk.htm"
tables <- as.data.frame(readHTMLTable(theurl,stringsAsFactors = FALSE, encoding="UTF-8"))
dopusk<-30
partName<-c()
partRowID<-c()
dataID<-c()
alldata<-data.frame()
alldata2<-data.frame()
for (i in c(2,4))
{
column<-enc2native(tables[,i])
for(j in 1:nrow(tables))
{
if(nchar(column[j])>dopusk)
{
partName=c(partName,column[j])
partRowID<-c(partRowID,j)
}
else if (nchar(column[j])<dopusk && nchar(column[j])>1)
{
dataID<-c(dataID,j)
}
}
alldata<-c(alldata, column[dataID])
x<-as.data.frame(unlist(alldata))
dataID<-c()
}
bad<-is.na(x)
x[!bad]
column<-c()
for (i in c(3,5))
{
column<-enc2native(tables[,i])
for(j in 1:nrow(tables))
{
if(nchar(column[j])>dopusk)
{
partName=c(partName,column[j])
partRowID<-c(partRowID,j)
}
else if (nchar(column[j])<dopusk && nchar(column[j])>1)
{
dataID<-c(dataID,j)
}
}
alldata2<-c(alldata2, column[dataID])
y<-as.data.frame(unlist(alldata))
dataID<-c()
}
bad<-is.na(y)
y[!bad]
alldata2
library(XML)
theurl <- "druk.htm"
tables <- as.data.frame(readHTMLTable(theurl,stringsAsFactors = FALSE, encoding="UTF-8"))
dopusk<-30
partName<-c()
partRowID<-c()
dataID<-c()
alldata<-data.frame()
alldata2<-data.frame()
for (i in c(2,4))
{
column<-enc2native(tables[,i])
for(j in 1:nrow(tables))
{
if(nchar(column[j])>dopusk)
{
partName=c(partName,column[j])
partRowID<-c(partRowID,j)
}
else if (nchar(column[j])<dopusk && nchar(column[j])>1)
{
dataID<-c(dataID,j)
}
}
alldata<-c(alldata, column[dataID])
x<-as.data.frame(unlist(alldata))
dataID<-c()
}
bad<-is.na(x)
x[!bad]
column<-c()
for (i in c(3,5))
{
column<-enc2native(tables[,i])
for(j in 1:nrow(tables))
{
if(nchar(column[j])>dopusk)
{
partName=c(partName,column[j])
partRowID<-c(partRowID,j)
}
else if (nchar(column[j])<dopusk && nchar(column[j])>1)
{
dataID<-c(dataID,j)
}
}
alldata2<-c(alldata2, column[dataID])
y<-as.data.frame(unlist(alldata2))
dataID<-c()
}
bad<-is.na(y)
y[!bad]
cbind(x,y)
x[457]
x[457,1]
library(XML)
theurl <- "druk.htm"
tables <- as.data.frame(readHTMLTable(theurl,stringsAsFactors = FALSE, encoding="UTF-8"))
dopusk<-30
partName<-c()
partRowID<-c()
dataID<-c()
alldata<-data.frame()
alldata2<-data.frame()
for (i in c(2,4))
{
column<-as.character(enc2native(tables[,i]))
for(j in 1:nrow(tables))
{
if(nchar(column[j])>dopusk)
{
partName=c(partName,column[j])
partRowID<-c(partRowID,j)
}
else if (nchar(column[j])<dopusk && nchar(column[j])>1)
{
dataID<-c(dataID,j)
}
}
alldata<-c(alldata, column[dataID])
x<-as.data.frame(unlist(alldata))
dataID<-c()
}
bad<-is.na(x)
x[!bad]
for (i in c(3,5))
{
column<-as.character(enc2native(tables[,i]))
for(j in 1:nrow(tables))
{
if(nchar(column[j])>dopusk)
{
partName=c(partName,column[j])
partRowID<-c(partRowID,j)
}
else if (nchar(column[j])<dopusk && nchar(column[j])>1)
{
dataID<-c(dataID,j)
}
}
alldata2<-c(alldata2, column[dataID])
y<-as.data.frame(unlist(alldata2))
dataID<-c()
}
bad<-is.na(y)
y[!bad]
cbind(x,y)
x[457,1]
str(x)
library(XML)
theurl <- "druk.htm"
tables <- as.data.frame(readHTMLTable(theurl,stringsAsFactors = FALSE, encoding="UTF-8"))
dopusk<-30
partName<-c()
partRowID<-c()
dataID<-c()
alldata<-data.frame()
alldata2<-data.frame()
for (i in c(2,4))
{
column<-as.character(enc2native(tables[,i]))
for(j in 1:nrow(tables))
{
if(nchar(column[j])>dopusk)
{
partName=c(partName,column[j])
partRowID<-c(partRowID,j)
}
else if (nchar(column[j])<dopusk && nchar(column[j])>1)
{
dataID<-c(dataID,j)
}
}
alldata<-c(alldata, column[dataID])
x<-as.data.frame(unlist(alldata), stringsAsFactors=FALSE)
dataID<-c()
}
bad<-is.na(x)
x[!bad]
for (i in c(3,5))
{
column<-as.character(enc2native(tables[,i]))
for(j in 1:nrow(tables))
{
if(nchar(column[j])>dopusk)
{
partName=c(partName,column[j])
partRowID<-c(partRowID,j)
}
else if (nchar(column[j])<dopusk && nchar(column[j])>1)
{
dataID<-c(dataID,j)
}
}
alldata2<-c(alldata2, column[dataID])
y<-as.data.frame(unlist(alldata2), stringsAsFactors=FALSE)
dataID<-c()
}
bad<-is.na(y)
y[!bad]
cbind(x,y)
str(x)
library(XML)
theurl <- "druk.htm"
tables <- as.data.frame(readHTMLTable(theurl,stringsAsFactors = FALSE, encoding="UTF-8"))
dopusk<-30
partName<-c()
partRowID<-c()
dataID<-c()
alldata<-data.frame()
alldata2<-data.frame()
for (i in c(2,4))
{
column<-as.character(enc2native(tables[,i]))
for(j in 1:nrow(tables))
{
if(nchar(column[j])>dopusk)
{
partName=c(partName,column[j])
partRowID<-c(partRowID,j)
}
else if (nchar(column[j])<dopusk && nchar(column[j])>1)
{
dataID<-c(dataID,j)
}
}
alldata<-c(alldata, column[dataID])
x<-as.data.frame(unlist(alldata), stringsAsFactors=FALSE)
dataID<-c()
}
bad<-is.na(x)
x<-x[!bad]
for (i in c(3,5))
{
column<-as.character(enc2native(tables[,i]))
for(j in 1:nrow(tables))
{
if(nchar(column[j])>dopusk)
{
partName=c(partName,column[j])
partRowID<-c(partRowID,j)
}
else if (nchar(column[j])<dopusk && nchar(column[j])>1)
{
dataID<-c(dataID,j)
}
}
alldata2<-c(alldata2, column[dataID])
y<-as.data.frame(unlist(alldata2), stringsAsFactors=FALSE)
dataID<-c()
}
bad<-is.na(y)
y<-y[!bad]
cbind(x,y)
str(x)
x<-readLines("http://simplystatistics.tumblr.com/")[1:150]
x<-readLines("http://simplystatistics.tumblr.com/")
x<-readLines("http://simplystatistics.tumblr.com/")[1:150]
simplyStats<-readLines("http://simplystatistics.tumblr.com/")[1:150]
nchar(simplyStats)
table(nchar(simplyStats))
nchar(simplyStats)[simplyStats==2]
nchar(simplyStats)[simplyStats==22]
nchar(simplyStats)[22]
nchar(simplyStats)[23]
nchar(simplyStats)[28]
nchar(simplyStats==22)
nchar(simplyStats==2)
nchar(simplyStats)
table(nchar(simplyStats))
table(nchar(simplyStats[2]))
table(nchar(simplyStats[45]))
download.file(url="https://dl.dropbox.com/u/7710864/data/csv_hid/ss06hid.csv", destfile="quiz1.csv")
x<-read.csv("quiz1.csv")
head(x)
summary(x)
x$VAL
x$VAL==24
sum(x$VAL==24)
sum(x$VAL==24, na.rm=T)
str(x$FES)
summary(x$FES)
x<-read.csv("quiz1.csv")
y<-read.csv("quiz2.csv")
z<-merge(x=x$SERIALNO, y=y$SERIALNO,all=T)
help(cut2)
help(cut)
fsalary<-function(Product=0, Qualification=0)
{
timeAll=22*12
#DONT FORGET TO CHECK WD
setwd("C:\\Users\\Vadim\\Documents\\rashetka")
products<-read.csv("Products.csv")
qualif<-read.csv("Qualifications.csv")
profes<-read.csv("Professions.csv")
prodQualif<-read.csv("ProdQualif.csv")
## time for making all amount of each product
eachProdTime=data.frame("id"=products$id,"allTime"=products$amount*products$time*timeAll)
# data.frame to show about ALL products info
productInfo<-data.frame(products)
productInfo$amount<-productInfo$amount*timeAll
productInfo$progTime<-eachProdTime$allTime
## salary for making each product
salaryProd<-c()
for (i in 1:nrow(prodQualif))
{
salaryProd[i]<-eachProdTime[prodQualif$product[i],"allTime"]*qualif[prodQualif$qualif.id[i],"tariff"]
}
names(salaryProd)=prodQualif$product
## salary per qualifications
salary<-c()
# time for each qualification ID
qualifTime<-c()
for (i in 1:nrow(qualif))
{
salary[i]=sum(salaryProd[which(qualif$id[i]==prodQualif$qualif.id)])
qualifTime[i] = sum(eachProdTime$allTime[which(qualif$id[i]==prodQualif$qualif.id)])
}
names(qualifTime)=qualif$id
names(salary)=qualif$id
# making data.frame with information describing ALL about prfessions and qualifications
salaryInfo<-as.data.frame(qualif$id)
names(salaryInfo)<-"qualif.id"
salaryInfo$qualif<-qualif$qualification
for ( i in 1:nrow(qualif))
{
salaryInfo$profes[i]<- as.character(profes$description[qualif$profes[i]])
salaryInfo$tariff[i]<-as.character(qualif$tariff[qualif$qualification[i]])
}
salaryInfo$salary<-salary
qualif
# number of employees for each qualification ID
employeeNum<-qualifTime/timeAll
# Show about products by its' ID
if (Product>0 )
{
print("Product is: ")
names(productInfo)<-c("id",  "amount","time per each", "time for program")
print(productInfo[which(productInfo$id==Product),])
x<-salaryInfo[which(salaryInfo$qualif.id==prodQualif$qualif.id[which(productInfo$id==Product)]),]
# Changing value of salary per profession to value of salary PER PRODUCT
x$salary<- salaryProd[Product]
names(x)<- c("qualif.id", "qualification", "profession", "tariff", "salary for product")
print(" Profession for this product :")
print(x)
}
# SHow about profession by its' ID
if( Qualification>0)
{
print("Qualifications is :")
print(salaryInfo[which(salaryInfo$qualif.id==Qualification),])
print("Products, which are produced by this profession")
names(productInfo)<-c("id",  "amount","time per each", "time for program")
print(productInfo[which(prodQualif$qualif.id==Qualification),])
}
if (Product==0 & Qualification==0 )
{
## MAKING INFO TO SHOW ON SCREEN
cat ("salary for ", timeAll, " working days \n")
## Info about production to show with correct names
namedProductInfo<-productInfo
names(namedProductInfo)<-c("code",  "amount","time per each", "time for program")
print("Information about production")
print(namedProductInfo)
## Info about salary to show, sorted by profession
sortedSalaryInfo<-salaryInfo[order(salaryInfo$profes),]
print("Information about salary for qualifications")
print(sortedSalaryInfo[c("profes", "qualif","tariff", "salary")])
}
}
fsalary(Product=2)
fsalary<-function(Product=0, Qualification=0)
{
timeAll=22*12
#DONT FORGET TO CHECK WD
setwd("C:\\Users\\Vadim\\Documents\\rashetka")
products<-read.csv("Products.csv")
qualif<-read.csv("Qualifications.csv")
profes<-read.csv("Professions.csv")
prodQualif<-read.csv("ProdQualif.csv")
## time for making all amount of each product
eachProdTime=data.frame("id"=products$id,"allTime"=products$amount*products$time*timeAll)
# data.frame to show about ALL products info
productInfo<-data.frame(products)
productInfo$amount<-productInfo$amount*timeAll
productInfo$progTime<-eachProdTime$allTime
## salary for making each product
salaryProd<-c()
for (i in 1:nrow(prodQualif))
{
salaryProd[i]<-eachProdTime[prodQualif$product[i],"allTime"]*qualif[prodQualif$qualif.id[i],"tariff"]
}
names(salaryProd)=prodQualif$product
## salary per qualifications
salary<-c()
# time for each qualification ID
qualifTime<-c()
for (i in 1:nrow(qualif))
{
salary[i]=sum(salaryProd[which(qualif$id[i]==prodQualif$qualif.id)])
qualifTime[i] = sum(eachProdTime$allTime[which(qualif$id[i]==prodQualif$qualif.id)])
}
names(qualifTime)=qualif$id
names(salary)=qualif$id
# making data.frame with information describing ALL about prfessions and qualifications
salaryInfo<-as.data.frame(qualif$id)
names(salaryInfo)<-"qualif.id"
salaryInfo$qualif<-qualif$qualification
for ( i in 1:nrow(qualif))
{
salaryInfo$profes[i]<- as.character(profes$description[qualif$profes[i]])
salaryInfo$tariff[i]<-as.character(qualif$tariff[qualif$qualification[i]])
}
salaryInfo$salary<-salary
qualif
# number of employees for each qualification ID
employeeNum<-qualifTime/timeAll
# Show about products by its' ID
if (Product>0 )
{
print("Product is: ")
names(productInfo)<-c("id",  "amount","time per each", "time for program")
print(productInfo[which(productInfo$id==Product),])
x<-salaryInfo[which(salaryInfo$qualif.id==prodQualif$qualif.id[which(productInfo$id==Product)]),]
# Changing value of salary per profession to value of salary PER PRODUCT
x$salary<- salaryProd[Product]
names(x)<- c("qualif.id", "qualification", "profession", "tariff", "salary for product")
print(" Profession for this product :")
print(x)
}
# SHow about profession by its' ID
if( Qualification>0)
{
print("Qualifications is :")
print(salaryInfo[which(salaryInfo$qualif.id==Qualification),])
print("Products, which are produced by this profession")
names(productInfo)<-c("id",  "amount","time per each", "time for program")
print(productInfo[which(prodQualif$qualif.id==Qualification),])
}
if (Product==0 & Qualification==0 )
{
## MAKING INFO TO SHOW ON SCREEN
cat ("salary for ", timeAll, " working days \n")
## Info about production to show with correct names
namedProductInfo<-productInfo
names(namedProductInfo)<-c("code",  "amount","time per each", "time for program")
print("Information about production")
print(namedProductInfo)
## Info about salary to show, sorted by profession
sortedSalaryInfo<-salaryInfo[order(salaryInfo$profes),]
print("Information about salary for qualifications")
print(sortedSalaryInfo[c("profes", "qualif","tariff", "salary")])
}
}
fsalary(Product=2)
fsalary(Qualification=4)
fsalary()
